// ChatClient
package new1;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.Socket;

public class ChatClient1 extends Thread {
    private Socket clientSocket;
    private BufferedReader reader;
    private PrintWriter writer;

    public ChatClient1() throws IOException {
        clientSocket = new Socket("localhost", 7777);
        reader = new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));
        writer = new PrintWriter(clientSocket.getOutputStream());
    }

    private void startClient() throws IOException {

        BufferedReader reader1 = new BufferedReader(
                new InputStreamReader(System.in));
        String message;
        this.start();

        System.out.println("Write your message");
        while (!(message = reader1.readLine()).equals("exit")) {
            writer.println(message);
            writer.flush();
        }

        writer.close();
        reader.close();
        clientSocket.close();
    }

    @Override
    public void run() {
        String message;
        try {
            while ((message = reader.readLine()) != null) {
                System.out.println("Dima" + message);
            }
        } catch (IOException e) {
            System.out.println("Disconnected from server");
        }
    }

    public static void main(String[] args) {
        try {
            new ChatClient1().startClient();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
// ChatClient2
package new1;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.Socket;

public class ChatClient2 extends Thread {
    private Socket clientSocket;
    private BufferedReader reader;
    private PrintWriter writer;

    public ChatClient2() throws IOException {
        clientSocket = new Socket("localhost", 7777);
        reader = new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));
        writer = new PrintWriter(clientSocket.getOutputStream());
    }

    private void startClient() throws IOException {

        BufferedReader reader1 = new BufferedReader(
                new InputStreamReader(System.in));
        String message;
        this.start();

        System.out.println("Write your message");
        while (!(message = reader1.readLine()).equals("exit")) {
            writer.println(message);
            writer.flush();
        }

        writer.close();
        reader.close();
        clientSocket.close();
    }

    @Override
    public void run() {
        String message;
        try {
            while ((message = reader.readLine()) != null) {
                System.out.println("Dima" + message);
            }
        } catch (IOException e) {
            System.out.println("Disconnected from server");
        }
    }

    public static void main(String[] args) {
        try {
            new ChatClient2().startClient();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
//ChatClient3
package new1;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.Socket;

public class ChatClient3 extends Thread{

    private Socket clientSocket;
    private BufferedReader reader;
    private PrintWriter writer;

    public ChatClient3() throws IOException {
        clientSocket = new Socket("localhost", 7777);
        reader = new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));
        writer = new PrintWriter(clientSocket.getOutputStream());
    }

    private void startClient() throws IOException {

        BufferedReader reader1 = new BufferedReader(
                new InputStreamReader(System.in));
        String message;
        this.start();

        System.out.println("Write your message");
        while (!(message = reader1.readLine()).equals("exit")) {
            writer.println(message);
            writer.flush();
        }

        writer.close();
        reader.close();
        clientSocket.close();
    }

    @Override
    public void run() {
        String message;
        try {
            while ((message = reader.readLine()) != null) {
                System.out.println("Alex" + message);
            }
        } catch (IOException e) {
            System.out.println("Disconnected from server");
        }
    }

    public static void main(String[] args) {
        try {
            new ChatClient3().startClient();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
//Там еще должен быть сер вер и ClientInstance, но я их не стал копировать
